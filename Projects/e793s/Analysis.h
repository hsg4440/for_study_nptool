#ifndef Analysis_h 
#define Analysis_h
/*****************************************************************************
 * Copyright (C) 2009-2014    this file is part of the NPTool Project        *
 *                                                                           *
 * For the licensing terms see $NPTOOL/Licence/NPTool_Licence                *
 * For the list of contributors see $NPTOOL/Licence/Contributors             *
 *****************************************************************************/

/*****************************************************************************
 * Original Author: Adrien MATTA  contact address: a.matta@surrey.ac.uk      *
 * Edited for e793s                                                          *
 *                                                                           *
 * Creation Date  :                                                          *
 * Last update    : May 2021                                                 *
 *---------------------------------------------------------------------------*
 * Decription:                                                               *
 * Class describing the property of an Analysis object                       *
 *                                                                           *
 *---------------------------------------------------------------------------*
 * Comment:                                                                  *
 *                                                                           *
 *                                                                           *
 *****************************************************************************/
#include"NPVAnalysis.h"
#include"NPEnergyLoss.h"
#include"NPReaction.h"
#include"NPBeam.h"
#include"RootOutput.h"
#include"RootInput.h"
#include "TMust2Physics.h"
#include "TMugastPhysics.h"
#include "TCATSPhysics.h"
//#include "../../NPLib/Detectors/ModularLeaf/TModularLeafPhysics.h"
#include "TModularLeafPhysics.h"
#include <TRandom3.h>
#include <TVector3.h>
#include <TMath.h>
#include <bitset>

class Analysis: public NPL::VAnalysis{
  public:
    Analysis();
    ~Analysis();

  public: 
    void Init();
    void TreatEvent();
    void End();

    void InitOutputBranch();
    void InitInputBranch();
    void SetBranchStatus();
    void CalculateVamos();
    void ReInitValue();
    static NPL::VAnalysis* Construct();

  private:
    unsigned int ParticleMult;
    unsigned int GammaMult;
    //double EDC;
    std::vector<double> EDC;
    vector<double> AddBack_EDC;
    double EAgata;
    std::vector<double> ELab;
    std::vector<double> Ex;
    std::vector<double> Ecm;
    std::vector<double> RawEnergy;
    std::vector<double> ThetaLab;
    std::vector<double> PhiLab;
    std::vector<double> ThetaCM;
    
    NPL::Reaction reaction;
    //	Energy loss table: the G4Table are generated by the simulation
    NPL::EnergyLoss LightTarget;
    NPL::EnergyLoss LightAl;
    NPL::EnergyLoss LightSi;
    NPL::EnergyLoss BeamTargetELoss;

    double TargetThickness ;
    double WindowsThickness;
    // Beam Energy
    double OriginalBeamEnergy ; // AMEV
    double FinalBeamEnergy; 

    // Beam Position
    double XBeam;
    double YBeam;

    // intermediate variable
    TVector3 BeamDirection;
    TVector3 BeamImpact;
    TRandom3 Rand;
    int Run;
    int DetectorNumber;
    double ThetaNormalTarget;
    double ThetaM2Surface;
    double ThetaMGSurface;
    double elab_tmp;
    double thetalab_tmp;
    double philab_tmp;
    double Si_E_M2;
    double CsI_E_M2;
    double Energy;
#define GATCONF_SIZE 16
    unsigned int GATCONF_Counter[GATCONF_SIZE];
    string GATCONF_Label[GATCONF_SIZE] = { 
      "MUVI1",
      "MUVI2",
      "MUVI3",
      "",
      "CATS2%",
      "VAMOS%",
      "MUST2%",
      "",
      "",
      "VAMOS",
      "ORAGATA", 
    } ;
    
    double MG_T;
    double MG_E;
    int    MG_X;
    int    MG_Y;
    int    MG_D;

    double ThetaGDSurface ;
    std::vector<double> X ;
    std::vector<double> Y ;
    std::vector<double> Z ;
    int AHeavy;
    int ALight;
    double MHeavy;
    double MLight;

    // Vamos Branches
    unsigned long long int LTS;
    unsigned short T_FPMW_CATS1; 
    float T_FPMW_CATS2_C; 
    unsigned short T_FPMW_HF; 
    unsigned short T_CATS2_HF;
    unsigned short T_MUGAST_FPMW;
    unsigned short T_FPMW_CATS2;
    float T_FPMW_HF_C; 
    float IC[12]; 
    unsigned short ICRawPUMult01[7]; 

    float DC0_X;
    float DC0_Y;

    float DC1_X;
    float DC1_Y;

    float DC2_X;
    float DC2_Y;

    float DC3_X;
    float DC3_Y;

    float Xf;
    float Tf;

    float Brho;
    float Theta;
    float Phi;
    float Path;

    unsigned short EWIRE_1_1;
    unsigned short EWIRE_1_2;
    unsigned short EWIRE_2_1;
    unsigned short EWIRE_2_2;

    int MW_Nr;
    float MW_T[1000];
    float MWT[1000];
    unsigned short MW_N[1000];
    unsigned long long int AGAVA_VAMOSTS;

    // Vamos Calculated
    double BrhoRef;
    double mT;    
    double mV;   
    double mD;    
    double mBeta;
    double mGamma;
    double mM_Q;  
    double mM;    
    double mE;    
    double mdE;   

    // Agata branches
    double agata_zShift;
    /*
    unsigned long long int TStrack;
    int nbHits;
    int nbTrack;
    float *trackE  = new float(1000);
    float *trackX1 = new float(1000);
    float *trackY1 = new float(1000);
    float *trackZ1 = new float(1000);
    float *trackT  = new float(1000);
    int *trackCrystalID = new int(1000);
    */
    int nbAdd;
    unsigned long long int TSHit;
    float AddE[1000] ;
    float AddX[1000] ;
    float AddY[1000] ;
    float AddZ[1000] ;

    //
    double dE;
    double dTheta;
    // Branches and detectors
    TMust2Physics* M2;
    TMugastPhysics* MG;
    //TCATSPhysics* CATS;
    TModularLeafPhysics* ML;

    // Beam object
    NPL::Beam* Beam;

    unsigned int GATCONF_MASTER;

    unsigned long long int count ;

};
#endif
