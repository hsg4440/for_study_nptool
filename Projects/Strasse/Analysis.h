#ifndef Analysis_h 
#define Analysis_h
/*****************************************************************************
 * Copyright (C) 2009-2014    this file is part of the NPTool Project        *
 *                                                                           *
 * For the licensing terms see $NPTOOL/Licence/NPTool_Licence                *
 * For the list of contributors see $NPTOOL/Licence/Contributors             *
 *****************************************************************************/

/*****************************************************************************
 * Original Author: Adrien MATTA  contact address: a.matta@surrey.ac.uk      *
 *                                                                           *
 * Creation Date  : march 2025                                               *
 * Last update    :                                                          *
 *---------------------------------------------------------------------------*
 * Decription:                                                               *
 * Class describing the property of an Analysis object                       *
 *                                                                           *
 *---------------------------------------------------------------------------*
 * Comment:                                                                  *
 *                                                                           *
 *                                                                           *
 *****************************************************************************/
#include"NPVAnalysis.h"
#include"NPEnergyLoss.h"
#include"NPQFS.h"
#include"RootOutput.h"
#include"RootInput.h"
#include "TStrassePhysics.h"
#include "TCatanaPhysics.h"
#include "TInitialConditions.h"
#include "TInteractionCoordinates.h"
#include "TReactionConditions.h"
#include <TRandom3.h>
#include <TVector3.h>
#include <TLorentzVector.h>
#include <TMath.h>

class Analysis: public NPL::VAnalysis{
  public:
    Analysis();
    ~Analysis();

  public: 
    void Init();
    void TreatEvent();
    void End();
    void InitOutputBranch();
    void InitInputBranch();
    void ReInitValue();
    static NPL::VAnalysis* Construct();
    TVector3 InterpolateInPlaneZ(TVector3,TVector3,double);
 
  private:
    double Ex;
    double E1;
    double E2;
    double Theta12;
    double ThetaCM;
    double VertexX;
    double VertexY;
    double VertexZ;
    double deltaX;
    double deltaY;
    double deltaZ;
    double Distance;
    double deltaPhi;
    double sumTheta;
    TLorentzVector LV_A;
    TLorentzVector LV_T;
    TLorentzVector LV_B;
    TLorentzVector LV_p1;
    TLorentzVector LV_p2;

    NPL::Beam* myBeam;
    NPL::QFS* m_QFS;
    //	Energy loss table: the G4Table are generated by the simulation
    EnergyLoss BeamTarget;
    EnergyLoss protonTarget;
    EnergyLoss protonAl;
    EnergyLoss protonSi;
    double ReconstructProtonEnergy(const TVector3& x0,const TVector3& dir,const double& Ecatana);

    TVector3 BeamImpact;

    double TargetThickness ;
    // Beam Energy
    double InitialBeamEnergy ; // TKE beam in MeV
    // intermediate variable
    TRandom3 Rand ;
    TStrassePhysics* Strasse;
    TCatanaPhysics* Catana;
    TInitialConditions* IC ;
    TInteractionCoordinates* DC;
    TReactionConditions* RC;
};
#endif
